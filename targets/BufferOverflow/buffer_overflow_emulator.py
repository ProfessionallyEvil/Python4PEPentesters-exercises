#!/usr/bin/python

# buffer_overflow_emulator is a target used for demonstration purposes for the pattern lab
import socketserver
import random
import sys

breaking_point = random.randint(50, 150)
eip_start = "A623".encode('ascii')


class BufferOverflowEmulator(socketserver.BaseRequestHandler):
    def handle(self):
        self.data = ''
        self.request.sendall("Username: ".encode('utf-8'))
        self.request.recv(1024).strip()
        self.request.sendall("Password: ".encode('utf-8'))
        password = self.request.recv(1024).strip()
        if len(password) <= breaking_point:
            self.request.sendall("Authentication Failed.\n".encode('utf-8'))
        else:
            self.request.sendall("Unexpected Error.\n".encode('utf-8'))
            overflow = password[breaking_point:]
            if len(overflow) < 4:
                eip = overflow + eip_start[len(overflow):]
            else:
                eip = overflow[:4]
            self.request.sendall("*** [Debugger reports EIP => {}]\n".format(eip[::-1].hex()).encode('utf-8'))


if __name__ == "__main__":
    print ('Initializing BufferOverflow Emulator...')

    HOST, PORT = "localhost", 9947

    if len(sys.argv) > 0 and sys.argv[0].isdigit():
        PORT = int(sys.argv[0])

    # Create the server, binding to localhost on port 9946
    server = socketserver.TCPServer((HOST, PORT), BufferOverflowEmulator)

    # Activate the server; this will keep running until you interrupt the program with Ctrl-C
    print ('Starting buffer overflow emulator on ' + HOST + ':' + str(PORT))
    server.serve_forever()
