#!/usr/bin/python

# AccountService is a target used for demonstration purposes
import socketserver
import random
import sqlite3
from hashlib import md5
import sys

db = sqlite3.connect(':memory:')
server = None


class AccountServer(socketserver.BaseRequestHandler):

    def handle(self):
        self.data = ''
        self.request.sendall("Welcome to AccountServer.  Type 'help' for command list.")
        while self.data != 'exit':
            if self.data != '':
                self.dispatch_method(self.data, 'do_')
            self.request.sendall('\nAccountServer> ')
            self.data = self.request.recv(1024).strip()
            print ("{} wrote:".format(self.client_address[0]))
            print (self.data)

    def get_method_list(self, prefix):
        method_list = []
        for method in dir(self):
            if callable(getattr(self, method)) and method.startswith(prefix):
                method_list.append(method[len(prefix):])
        return method_list

    def dispatch_method(self, params, prefix):
        print ('running dispatch on '+params)
        methods = self.get_method_list(prefix)
        if len(params) > 0:
            x = params.split()[0]
            #print 'dispatching ' + x
            if x in methods:
                #print x + ' found in methods...'
                p = params[len(x):].lstrip()
                func = getattr(self,  prefix + x)
                func(p)
            else:
                print (x + ' not found in method list ' + str(methods))
                self.request.sendall("I do not understand that command.  Try 'help'")

    def do_help(self, params):
        method_list = self.get_method_list("do_")
        self.request.sendall('Available commands:')
        for method in method_list:
            self.request.sendall('\n  ' + method)

    def do_list(self, params):
        args = params.split()
        if len(args) != 2:
            self.request.sendall('Usage: list <username> <pin>')
        elif len(args[1]) != 4:
            self.request.sendall('The pin must be 4 digits long and cannot begin with 0.')
        else:
            key = md5((args[0] + ':' + args[1]).encode('utf-8')).hexdigest()

            with db:
                db.row_factory = sqlite3.Row
                cur = db.cursor()
                cur.execute('SELECT * FROM accounts where username=? and pin=?', (args[0], key))
                rows = cur.fetchall()
                if len(rows) == 0:
                    self.request.sendall('No matching accounts.')
                else:
                    self.request.sendall('  type  | account number | balance ')

                    for row in rows:
                        account_type = row["acct_type"]
                        account_number = row["acct_number"]
                        balance = row["balance"]
                        self.request.sendall("\n%s |      %s | $%s" % (account_type, account_number, balance))

    def do_exit(self, params):
        self.request.sendall('\nExiting...')


def setup_db():
    with open('users.txt', encoding="utf-8") as f:
        users = f.read().splitlines()
    types = ['Savings ', 'Checking']   # Space at the end of savings is to make columns line up (yes, it's a hack)
    c = db.cursor()
    c.execute("create table accounts (username, pin, acct_type, acct_number, balance)")

    for user in users:
        if user == 'test':
            pin = '1234'
        else:
            pin = str(random.randint(1000, 9999))
        key = md5((user + ':' + pin).encode('utf-8')).hexdigest()
        acct_type = random.choice(types)
        acct_number = acct_type[0] + str(random.randint(10000000, 99999999))
        acct_balance = str(random.randint(1, 1000000))+'.00'
        c.execute("insert into accounts values (?,?,?,?,?)", (user, key, acct_type, acct_number, acct_balance))


if __name__ == "__main__":
    print ('Initializing account DB...')
    setup_db()

    HOST, PORT = "localhost", 9999

    if len(sys.argv) > 0 and sys.argv[0].isdigit():
        PORT = int(sys.argv[0])

    # Create the server, binding to localhost on port 9999
    server = socketserver.TCPServer((HOST, PORT), AccountServer)

    # Activate the server; this will keep running until you interrupt the program with Ctrl-C
    print ('Starting account server on ' + HOST + ':' + str(PORT))
    server.serve_forever()


