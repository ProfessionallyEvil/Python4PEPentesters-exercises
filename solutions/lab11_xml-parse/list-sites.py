
# Write a utility application that parses website URLs out of a standard Nessus (XML) output file.  The output should
# be either a textual list of URLs or (even better) HTML with a set of links that can be opened in the browser.
# Process the XML using a xml.sax.ContentHandler object.
#
# Hints:
# - Nessus plugin id 22964 is the service identity plugin
# - Specific service names that are typically websites are ['www', 'http?', 'https?']
# - Take note of the XML structure.  In particular nodes ReportHost and ReportItem are of interest.
# - You can guess whether the protocol is http or https by searching the plugin output, e.g. re.search('TLS|SSL', output)

import xml.sax

# <ReportHost name="192.168.0.8">
# <ReportItem port="8180" svc_name="www" protocol="tcp" severity="0" pluginID="22964" pluginName="Service Detection" pluginFamily="Service detection">

class MyContentHandler(xml.sax.ContentHandler):
    def startElement(self, name, attrs):
        if name == 'ReportHost':
            self.current_host = attrs['name']
        elif name == 'ReportItem' and attrs['svc_name'] in ['www', 'http?', 'https?']:
            port = attrs['port']
            print('{}:{}'.format(self.current_host, port))


    def endElement(self, name):
        # implement me
        pass

    def characters(self, content):
        # implement me
        pass

content_handler = MyContentHandler()

parser = xml.sax.make_parser()
parser.setContentHandler(content_handler)
parser.parse(open('../../files/sample.nessus', 'r'))

