#!/usr/bin/python

import argparse
import os
import sys
import re
import netaddr

cidr_pattern = re.compile("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{2}$")
ipv4_pattern = re.compile("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")
dash_pattern = re.compile("^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}-[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$")


def nets2hosts(args):
    if cidr_pattern.search(args.input):
        network = netaddr.IPNetwork(args.input)
        for ip in list(network):
            host = str(ip)
            args.output.write('%s\n' % host)
    elif ipv4_pattern.search(args.input):
        args.output.write('%s\n' % args.input)
    elif os.path.exists(args.input) and os.path.isfile(args.input):
        with open(args.input, 'r') as nets:
            for net in nets:
                if cidr_pattern.search(net):
                    network = netaddr.IPNetwork(net)
                    for ip in list(network):
                        host = str(ip)
                        args.output.write('%s\n' % host)
                elif ipv4_pattern.search(net):
                    args.output.write('%s' % net)
                elif dash_pattern.search(net):
                    ip_list = list(netaddr.iter_iprange(net.split('-')[0], net.split('-')[1]))
                    for ip in ip_list:
                        host = str(ip)
                        args.output.write('%s\n' % host)
                else:
                    print ("%s not recognized as a network.  Skipping." % net)
    else:
        print ("%s not recognized as a network or file." % args.input)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Convert a network or list of networks to a list of hosts.')

    parser.add_argument('input', help="A network in CIDR notation or a file of networks.")
    parser.add_argument('output', nargs='?', type=argparse.FileType('w'), default=sys.stdout,
                                   help="A file for output. By default output will go to stdout.")

    args = parser.parse_args()
    nets2hosts(args)