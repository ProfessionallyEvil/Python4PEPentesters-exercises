#
# DO NOT EDIT THIS FILE!  Make a new file and copy the contents of this one as a starting point
#

# During a penetration test you run across a web-based service with a Direct Object Reference flaw.  It responds with
# PDF files that contain confidential information (perhaps a 3rd party HR payroll app).
# Write a Python script to download the PDF files and parse out some of the confidential information into a text format.
# A CSV output would be ideal.

# STEP A:
# - Start up the PDFReportService target application.  It runs on port 9943 by default.
# - Customer number 114070 is a known valid ID.  Use this to manually retrieve a PDF file.
# - Consider the following example code for using the PDFMiner module to parse text from the file.

import sys
from pdfminer.layout import LAParams
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfparser import PDFParser
from pdfminer.converter import TextConverter

fp = open('114070.pdf', 'rb')
parser = PDFParser(fp)
document = PDFDocument(parser)
rsrcmgr = PDFResourceManager()
device = TextConverter(rsrcmgr, sys.stdout, codec='utf-8', laparams=LAParams(), imagewriter=None)
interpreter = PDFPageInterpreter(rsrcmgr, device)
for page in PDFPage.create_pages(document):
    interpreter.process_page(page)
device.close()

# STEP B:
# Put your PDF parsing logic into a procedure that takes a PDF file path as input and returns the parsed text contents
# of the file.
# Output a cleaned-up version of the text content, perhaps a CSV
# - Hint: You will need to change the output from sys.stdout to an in-memory buffer.  The StringIO module will help.

# STEP C:
# Use the requests module to iterate over customer ids (from 100000-999999) and retrieve the PDF files.  When a file is found,
# feed it into your PDF parsing logic.
# Have your output go to a file.
# Don't forget to shut down the target app when you are all done with the lab.
