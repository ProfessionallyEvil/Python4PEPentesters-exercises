# The purpose of this exercise is to make a pattern creator and locator tool for use with buffer overflow discovery
# and exploitation.  The metasploit framework comes equipped with a ruby-based tool that does the same.  We are building
# one in Python so that it can easily use it in conjunction with an actual exploit launched from Python (that part is
# out of scope for this class).

# STEP A:
# Create a procedure that, given the parameter 'length', generates the pattern 'Aa0Aa1Aa2Aa3Aa4Aa5', etc... of the
# the supplied length.  Use a __name__ == "__main__" block to test the procedure.

# STEP B:
# Create a second procedure that, given the parameters 'address' and 'max' (defaults to 10000), will:
# a) convert the hex-based address into its ascii equivalent (let's call that the 'token')
# b) reverse the token, to account for little endian
# c) generate a pattern of size 'max'
# d) return the index the token in the pattern, or an appropriate error message if the token is not found

# STEP C:
# Use the argparser module to turn this functionality into a handy command-line tool.
#
# Hint: It may be easiest to create a subparser inside the argparser
