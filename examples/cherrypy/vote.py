#!/usr/bin/python

# A simple mock voting booth app used to demonstrate how a little scripting can circumvent controls that make
# assumptions about code running on the client/browser.  A cherrypy app.
# Created: 5/18/15
import os
import cherrypy
import hashlib


votes = {'Summer': 355, 'Pedro': 2}
voters = ['533be351efb1e60b27d0dd0af914d095', '0159f42627c62fcc0b2c56ad39e80a36', '84c697693afe1850ccd4e69c347ec0e7']
voted = []
nonces = []


def secureheaders():
    headers = cherrypy.response.headers
    headers['X-Frame-Options'] = 'DENY'
    headers['X-XSS-Protection'] = '1; mode=block'


def error_page_404(status, message, traceback, version):
    return "These are not the droids you are looking for..."


class VotingBooth(object):
    @cherrypy.expose()
    def links(self):
        page = "<html>Test Links:<ul>"
        for voter in voters:
            page += ("<li><a href=\"/?voterid=%s \">test link</a></li>" %voter)
        page +'</ul></html>'
        return page

    @cherrypy.expose()
    def index(self, voterid=''):
        return file('index.html')

    @cherrypy.expose()
    @cherrypy.tools.json_out()
    def validate(self, voterid=''):
        if voterid in voters:
            if voterid in voted:
                return {'result': 'error', 'message': 'voterid already used!'}
            else:
                voted.append(voterid)
                return {'result': 'success'}
        else:
            return {'result': 'error', 'message': 'no valid voterid supplied!  (hint, use <a href="/links">test links</a>)'}

    @cherrypy.expose()
    @cherrypy.tools.json_out()
    def vote(self, candidate='', time='', voterid='', mac=''):
        if candidate in votes:
            check = hashlib.md5(time + voterid).hexdigest()
            if check != mac:
                return {'result': 'error', 'message': 'mac check failed!'}
            elif mac not in nonces:
                votes[candidate] += 1
                nonces.append(mac)
                return {'result': 'success', 'message': 'vote for %s registered.' % candidate}
            else:
                return {'result': 'error', 'message': 'replay detected!'}
        else:
            return {'result': 'error', 'message': 'candidate not found!'}

    @cherrypy.expose()
    @cherrypy.tools.json_out()
    def results(self):
        return votes

if __name__ == '__main__':
    cherrypy.tools.secureheaders = cherrypy.Tool('before_finalize', secureheaders, priority=60)
    app_path = os.path.abspath(os.getcwd())
    conf = {
        '/': {
            'tools.sessions.on': False,
            # 'tools.sessions.secure': True,
            'tools.sessions.httponly': True,
            'tools.secureheaders.on': True,
            'tools.staticdir.root': app_path
        },
        '/static': {
            'tools.staticdir.on': True,
            'tools.staticdir.dir': 'static'
        }
    }

    cherrypy.config.update({'server.socket_port': 8888,
                            'server.socket_host': '0.0.0.0',
                            'error_page.404': error_page_404})

    cherrypy.quickstart(VotingBooth(), '/', conf)